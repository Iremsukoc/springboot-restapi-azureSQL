/*
 * Hotel Reservation API
 * REST API for managing hotel reservations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Reservation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-29T00:09:29.630033300+03:00[Europe/Istanbul]")
public class Reservation {
  public static final String SERIALIZED_NAME_RESERVATION_I_D = "reservationID";
  @SerializedName(SERIALIZED_NAME_RESERVATION_I_D)
  private Integer reservationID;

  public static final String SERIALIZED_NAME_HOTEL_I_D = "hotelID";
  @SerializedName(SERIALIZED_NAME_HOTEL_I_D)
  private Integer hotelID;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Integer date;

  public static final String SERIALIZED_NAME_CHECK_IN = "checkIn";
  @SerializedName(SERIALIZED_NAME_CHECK_IN)
  private LocalDate checkIn;

  public static final String SERIALIZED_NAME_CHECK_OUT = "checkOut";
  @SerializedName(SERIALIZED_NAME_CHECK_OUT)
  private LocalDate checkOut;

  public static final String SERIALIZED_NAME_GUEST_NAMES = "guestNames";
  @SerializedName(SERIALIZED_NAME_GUEST_NAMES)
  private String guestNames;

  public static final String SERIALIZED_NAME_GUEST_NUMBER = "guestNumber";
  @SerializedName(SERIALIZED_NAME_GUEST_NUMBER)
  private Integer guestNumber;

  public Reservation() {
  }

  public Reservation reservationID(Integer reservationID) {
    
    this.reservationID = reservationID;
    return this;
  }

   /**
   * Long ID of the reservation
   * @return reservationID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Long ID of the reservation")

  public Integer getReservationID() {
    return reservationID;
  }


  public void setReservationID(Integer reservationID) {
    this.reservationID = reservationID;
  }


  public Reservation hotelID(Integer hotelID) {
    
    this.hotelID = hotelID;
    return this;
  }

   /**
   * Long ID of the hotel related to the reservation
   * @return hotelID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Long ID of the hotel related to the reservation")

  public Integer getHotelID() {
    return hotelID;
  }


  public void setHotelID(Integer hotelID) {
    this.hotelID = hotelID;
  }


  public Reservation date(Integer date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date of the reservation
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date of the reservation")

  public Integer getDate() {
    return date;
  }


  public void setDate(Integer date) {
    this.date = date;
  }


  public Reservation checkIn(LocalDate checkIn) {
    
    this.checkIn = checkIn;
    return this;
  }

   /**
   * The check-in date of the reservation
   * @return checkIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The check-in date of the reservation")

  public LocalDate getCheckIn() {
    return checkIn;
  }


  public void setCheckIn(LocalDate checkIn) {
    this.checkIn = checkIn;
  }


  public Reservation checkOut(LocalDate checkOut) {
    
    this.checkOut = checkOut;
    return this;
  }

   /**
   * The check-out date of the reservation
   * @return checkOut
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The check-out date of the reservation")

  public LocalDate getCheckOut() {
    return checkOut;
  }


  public void setCheckOut(LocalDate checkOut) {
    this.checkOut = checkOut;
  }


  public Reservation guestNames(String guestNames) {
    
    this.guestNames = guestNames;
    return this;
  }

   /**
   * List&lt;String&gt; names of the guests for the reservation
   * @return guestNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List<String> names of the guests for the reservation")

  public String getGuestNames() {
    return guestNames;
  }


  public void setGuestNames(String guestNames) {
    this.guestNames = guestNames;
  }


  public Reservation guestNumber(Integer guestNumber) {
    
    this.guestNumber = guestNumber;
    return this;
  }

   /**
   * Number of guests for the reservation
   * @return guestNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of guests for the reservation")

  public Integer getGuestNumber() {
    return guestNumber;
  }


  public void setGuestNumber(Integer guestNumber) {
    this.guestNumber = guestNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reservation reservation = (Reservation) o;
    return Objects.equals(this.reservationID, reservation.reservationID) &&
        Objects.equals(this.hotelID, reservation.hotelID) &&
        Objects.equals(this.date, reservation.date) &&
        Objects.equals(this.checkIn, reservation.checkIn) &&
        Objects.equals(this.checkOut, reservation.checkOut) &&
        Objects.equals(this.guestNames, reservation.guestNames) &&
        Objects.equals(this.guestNumber, reservation.guestNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservationID, hotelID, date, checkIn, checkOut, guestNames, guestNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reservation {\n");
    sb.append("    reservationID: ").append(toIndentedString(reservationID)).append("\n");
    sb.append("    hotelID: ").append(toIndentedString(hotelID)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    checkIn: ").append(toIndentedString(checkIn)).append("\n");
    sb.append("    checkOut: ").append(toIndentedString(checkOut)).append("\n");
    sb.append("    guestNames: ").append(toIndentedString(guestNames)).append("\n");
    sb.append("    guestNumber: ").append(toIndentedString(guestNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reservationID");
    openapiFields.add("hotelID");
    openapiFields.add("date");
    openapiFields.add("checkIn");
    openapiFields.add("checkOut");
    openapiFields.add("guestNames");
    openapiFields.add("guestNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Reservation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Reservation.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reservation is not found in the empty JSON string", Reservation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Reservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reservation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("guestNames") != null && !jsonObj.get("guestNames").isJsonNull()) && !jsonObj.get("guestNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reservation.class));

       return (TypeAdapter<T>) new TypeAdapter<Reservation>() {
           @Override
           public void write(JsonWriter out, Reservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reservation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reservation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reservation
  * @throws IOException if the JSON string is invalid with respect to Reservation
  */
  public static Reservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reservation.class);
  }

 /**
  * Convert an instance of Reservation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

